#include <iostream>
#include <cmath> 
using namespace std;

// Класс Точка
class Tochka {
protected:
    double x, y;
public:
    Tochka(double x = 0, double y = 0) : x(x), y(y) {}
    
    double getX() const { return x; }
    double getY() const { return y; }
    
    void peremestit(double dx, double dy) {
        x += dx;
        y += dy;
    }
    
    void povernut(double ugol, double cx = 0, double cy = 0) {
        peremestit(-cx, -cy);
        double rad = ugol * M_PI / 180.0;
        double newX = x * cos(rad) - y * sin(rad);
        double newY = x * sin(rad) + y * cos(rad);
        x = newX;
        y = newY;
        peremestit(cx, cy);
    }
    
    virtual void narisovat() const {
        cout << "(" << x << ", " << y << ")";
    }
    
    virtual void steret() const {
        cout << "Стерта точка (" << x << ", " << y << ")";
    }
    
    virtual ~Tochka() {}
};

// Абстрактный класс Фигура
class Figura {
public:
    Tochka t1, t2, t3, t4;
    
    virtual void narisovat() const = 0;
    virtual void steret() const = 0;
    virtual void peremestit(double dx, double dy) = 0;
    virtual void povernut(double ugol) = 0;
    virtual ~Figura() {}
    
    virtual double getX() const {
        return (t1.getX() + t2.getX() + t3.getX() + t4.getX()) / 4;
    }
    
    virtual double getY() const {
        return (t1.getY() + t2.getY() + t3.getY() + t4.getY()) / 4;
    }
};

// Класс Линия
class Liniya : public Figura {
public:
    Liniya(double x1, double y1, double x2, double y2) {
        t1 = Tochka(x1, y1);
        t2 = Tochka(x2, y2);
        t3 = t1;
        t4 = t2;
    }

    void peremestit(double dx, double dy) override {
        t1.peremestit(dx, dy);
        t2.peremestit(dx, dy);
        t3.peremestit(dx, dy);
        t4.peremestit(dx, dy);
    }

    void povernut(double ugol) override {
        double cx = getX();
        double cy = getY();
        t1.povernut(ugol, cx, cy);
        t2.povernut(ugol, cx, cy);
        t3.povernut(ugol, cx, cy);
        t4.povernut(ugol, cx, cy);
    }

    void narisovat() const override {
        cout << "Линия от ";
        t1.narisovat();
        cout << " до ";
        t2.narisovat();
        cout << endl;
    }

    void steret() const override {
        cout << "Стерта линия от ";
        t1.narisovat();
        cout << " до ";
        t2.narisovat();
        cout << endl;
    }
};

// Класс Kvadrat
class Kvadrat : public Figura {
public:
    Kvadrat(double x, double y, double storona) {
        double half = storona / 2;
        t1 = Tochka(x - half, y - half); 
        t2 = Tochka(x + half, y - half); 
        t3 = Tochka(x + half, y + half); 
        t4 = Tochka(x - half, y + half); 
    }

    void peremestit(double dx, double dy) override {
        t1.peremestit(dx, dy);
        t2.peremestit(dx, dy);
        t3.peremestit(dx, dy);
        t4.peremestit(dx, dy);
    }

    void povernut(double ugol) override {
        double cx = getX();
        double cy = getY();
        t1.povernut(ugol, cx, cy);
        t2.povernut(ugol, cx, cy);
        t3.povernut(ugol, cx, cy);
        t4.povernut(ugol, cx, cy);
    }

    void narisovat() const override {
        cout << "Квадрат с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }

    void steret() const override {
        cout << "Стерт квадрат с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }
};
// Класс Pryamougolnik
class Pryamougolnik : public Figura {
public:
    Pryamougolnik(double x, double y, double shirina, double vysota) {
        double halfW = shirina / 2;
        double halfH = vysota / 2;
        t1 = Tochka(x - halfW, y - halfH); 
        t2 = Tochka(x + halfW, y - halfH); 
        t3 = Tochka(x + halfW, y + halfH); 
        t4 = Tochka(x - halfW, y + halfH); 
    }

    void peremestit(double dx, double dy) override {
        t1.peremestit(dx, dy);
        t2.peremestit(dx, dy);
        t3.peremestit(dx, dy);
        t4.peremestit(dx, dy);
    }

    void povernut(double ugol) override {
        double cx = getX();
        double cy = getY();
        t1.povernut(ugol, cx, cy);
        t2.povernut(ugol, cx, cy);
        t3.povernut(ugol, cx, cy);
        t4.povernut(ugol, cx, cy);
    }

    void narisovat() const override {
        cout << "Прямоугольник с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }

    void steret() const override {
        cout << "Стерт прямоугольник с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }
};

// Класс Romb
class Romb : public Figura {
public:
    Romb(double x, double y, double diag1, double diag2) {
        double halfD1 = diag1 / 2;
        double halfD2 = diag2 / 2;
        t1 = Tochka(x, y - halfD2);       
        t2 = Tochka(x + halfD1, y);      
        t3 = Tochka(x, y + halfD2);       
        t4 = Tochka(x - halfD1, y);       
    }

    void peremestit(double dx, double dy) override {
        t1.peremestit(dx, dy);
        t2.peremestit(dx, dy);
        t3.peremestit(dx, dy);
        t4.peremestit(dx, dy);
    }

    void povernut(double ugol) override {
        double cx = getX();
        double cy = getY();
        t1.povernut(ugol, cx, cy);
        t2.povernut(ugol, cx, cy);
        t3.povernut(ugol, cx, cy);
        t4.povernut(ugol, cx, cy);
    }

    void narisovat() const override {
        cout << "Ромб с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }

    void steret() const override {
        cout << "Стерт ромб с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }
};

// Класс Parallelogram
class Parallelogram : public Figura {
public:
    Parallelogram(double x, double y, double base, double height, double skew) {
        t1 = Tochka(x, y);                       
        t2 = Tochka(x + base, y);               
        t3 = Tochka(x + base + skew, y + height);
        t4 = Tochka(x + skew, y + height);       
    }

    void peremestit(double dx, double dy) override {
        t1.peremestit(dx, dy);
        t2.peremestit(dx, dy);
        t3.peremestit(dx, dy);
        t4.peremestit(dx, dy);
    }

    void povernut(double ugol) override {
        double cx = getX();
        double cy = getY();
        t1.povernut(ugol, cx, cy);
        t2.povernut(ugol, cx, cy);
        t3.povernut(ugol, cx, cy);
        t4.povernut(ugol, cx, cy);
    }

    void narisovat() const override {
        cout << "Параллелограмм с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }

    void steret() const override {
        cout << "Стерт параллелограмм с точками: ";
        t1.narisovat(); cout << ", ";
        t2.narisovat(); cout << ", ";
        t3.narisovat(); cout << ", ";
        t4.narisovat();
        cout << endl;
    }
};
// Функция для демонстрации
void demostrirovat(Figura* fig) {
    fig->narisovat();
    fig->peremestit(1, 1);
    fig->povernut(45);
    fig->narisovat();
    fig->steret();
    cout << "\n";
}

int main() {
    Liniya l(0, 0, 2, 2);
    Kvadrat kv(0, 0, 3);
    Pryamougolnik pr(1, 1, 4, 2);
    Romb rb(0, 0, 4, 2);
    Parallelogram pl(0, 0, 3, 2, 1);

    cout << "Демонстрация линии:\n";
    demostrirovat(&l);

    cout << "Демонстрация квадрата:\n";
    demostrirovat(&kv);

    cout << "Демонстрация прямоугольника:\n";
    demostrirovat(&pr);

    cout << "Демонстрация ромба:\n";
    demostrirovat(&rb);

    cout << "Демонстрация параллелограмма:\n";
    demostrirovat(&pl);

    return 0;
}
